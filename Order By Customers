use sakila;
go

--List of customers with the following:
--1) total transactions per cus
--2) avg of payments per cus

select cus.customer_id --use the pk - not the fk in the fact table
	  ,count(pay.payment_id) AS 'transactions'
--	  ,count(*) --Same Thing as the one before. It's counting.
	  ,avg(pay.amount) AS 'avg_payment'
	  ,sum(pay.amount) AS 'Sum_of_Payments'

from dbo.payment pay left join dbo.customer cus
		on pay.customer_id = cus.customer_id
group by cus.customer_id
order by 3 desc
;


--****************************************************************************
--****************************************************************************

--Limit the set for the following:
--1) customer MUST have 20 or more transactions


select cus.customer_id --use the pk - not the fk in the fact table
	  ,count(pay.payment_id) AS 'transactions'
--	  ,count(*) --Same Thing as the one before. It's counting.
	  ,avg(pay.amount) AS 'AVG'
	  

from dbo.payment pay left join dbo.customer cus
		on pay.customer_id = cus.customer_id
group by cus.customer_id
having count(pay.payment_id) >= 20
order by 2 desc
-- order by 2
;


--***************************************************************************
--***************************************************************************



--2) limit the transactions to ONLY orders greater than a 1.00 //atomic!! WHERE
--3) Return or Order the customers by avg of payment in Desc order (most to least)

select cus.customer_id --use the pk - not the fk in the fact table
	  ,cus.last_name AS 'First_Name'
	  ,cus.first_name
	  ,cus.first_name+' '+cus.last_name AS 'Customer'
	  ,cus.email AS 'Email'
	  ,count(pay.payment_id) AS 'Transactions'
--	  ,count(*) --Same Thing as the one before. It's counting.
	  ,avg(pay.amount) AS 'AVG'
	  
from dbo.payment pay left join dbo.customer cus
		on pay.customer_id = cus.customer_id
where pay.amount > 1.00
group by cus.customer_id
		,cus.last_name
		,cus.first_name
		,cus.first_name+' '+cus.last_name
		,cus.email
having count(pay.payment_id) >= 20
order by 3 desc
-- order by 2
;
